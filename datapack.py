from function import *
import os
import shutil

MCMETA = '''{
	"pack" : {
		"pack_format" : 3,
		"description" : "data pack generated by EasyDatapacks"
	}
}
'''

LOADTICK = '''{
	"values" : [
		%s
	]
}'''

def compile(destination, files, verbose = False, nofiles = False):
	'''path_in points to a text file containing your code.
	packname points to the folder where you want your datapack to end up'''

	packname = destination.split('/')[-1].split('\\')[-1]

	namespace = Namespace(packname, files)
	# try:
	namespace.compile(verbose)
	# except Exception as e:
	# 	print '(error) '+str(e)
	# 	return False

	if nofiles:
		return False

	# generate the file layout
	try:
		shutil.rmtree(destination)
	except: pass

	os.mkdir(destination)
	os.mkdir(os.path.join(destination, 'data'))
	with open(os.path.join(destination, 'pack.mcmeta'), 'w') as f:
		f.write(MCMETA)
	os.mkdir(os.path.join(destination, 'data', 'minecraft'))
	os.mkdir(os.path.join(destination, 'data', 'minecraft', 'tags'))
	os.mkdir(os.path.join(destination, 'data', 'minecraft', 'tags', 'functions'))

	# load
	with open(os.path.join(destination, 'data', 'minecraft', 'tags', 'functions', 'load.json'), 'w') as f:
		for func in namespace.functions:
			if func == 'main.load':
				f.write(LOADTICK % ('"'+packname+':load"'))
				break
		else:
			f.write(LOADTICK % "")

	# tick
	with open(os.path.join(destination, 'data', 'minecraft', 'tags', 'functions', 'tick.json'), 'w') as f:
		for func in namespace.functions:
			if func == 'main.tick':
				f.write(LOADTICK % ('"'+packname+':tick"'))
				break
		else:
			f.write(LOADTICK % "")

	# actual datapack
	os.mkdir(os.path.join(destination, 'data', packname))
	os.mkdir(os.path.join(destination, 'data', packname, 'functions'))
	for func in namespace.functions:
		with open(os.path.join(destination, 'data', packname, 'functions', func[5:]+'.mcfunction'), 'w') as f:
			f.write('\n'.join(namespace.functions[func].commands))

	return True